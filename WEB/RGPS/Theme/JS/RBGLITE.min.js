/*! ME App V2.0 app.js
* ================
* Main JS application file for ME App V2.0 v2. This file
* should be included in all pages. It controls some layout
* options and implements exclusive ME App V2.0 plugins.
*

*/





//RBG Variables

const LinkURL = 'http://tmlpnewskc31137.tmindia.tatamotors.com/RIYA_V03/'
var RavindraBhalchandraGaikwad = true;

var _Theme_Body_Font, _Theme_Menu_Font, _Theme_Body_BG, _Theme_Menu_BG;
var Theme_Body_Font, Theme_Menu_Font, Theme_Body_BG, Theme_Menu_BG;
var fram, spfrm, dataFetcher, projectlistURL, txtEmailBody, txtEmailStyle, txAttTitle, MessageBodyHTML, txtSubject, txtSenderUID, txtSenderPassword;
var txtSenderID, txtSenderPWD, BodyNameX , txtwtfName , txtTO , txtCC , txtBCC;

//if (!(x.toUpperCase().startsWith("TMLPNEWSKC31137")||x.toUpperCase().startsWith("TMLPNEWSKC31137")) || !(x.substring())) {
const validEmailExtensions = ["@tatamotors.com", "@tatatechnologies.com"];
const validServers = ["TMLPNEWSKC31137", "TMPNEMNLAPP01", "LOCALHOST"];
// Opera 8.0+

function AutoUpdateDispatchPlannerRemarks() {
    RIYA_V03.RIYAService.AutoUpdateRemarks( showHelp, NoHelp);
    function showHelp(result) {
        ShowPopup("Success", "<h3>Auto Update Successful</h3><ul>" + result + "</ul>");
    }
    function NoHelp() {
        ShowPopup("Failure", "Failure Updating Auto Remarks");
    }
   
}


function ShowSiteMap() {
    return false;
}


let isNavigatingAway = false;

// Function to handle logout
function handleLogout() {
    RIYA_V03.RIYAService.LogOutX(function (result) {
        console.log(result);
    }, function (ex) {
        console.log(ex);
    });
}

// Beforeunload event
$(window).on('beforeunload', function (event) {
    if (!isNavigatingAway) {
        handleLogout();
    }
});

// Set the flag when navigating away intentionally
$(document).on('click', 'a', function () {
    isNavigatingAway = true;
});

// Capture JavaScript redirects
function redirectTo(url) {
    isNavigatingAway = true;
    window.location.href = url; // Perform the redirect
}

// Reset the flag when the page is loaded
$(window).on('load', function () {
    isNavigatingAway = false;
});


jQuery.fn.filterByText = function (textbox) {
    return this.each(function () {
        var select = this;
        var options = [];
        $(select).find('option').each(function () {
            options.push({
                value: $(this).val(),
                text: $(this).text()
            });
        });
        $(select).data('options', options);

        $(textbox).bind('change keyup', function () {
            var options = $(select).empty().data('options');
            var search = $.trim($(this).val());
            var regex = new RegExp(search, "gi");

            $.each(options, function (i) {
                var option = options[i];
                if (option.text.match(regex) !== null) {
                    $(select).append(
                      $('<option>').text(option.text).val(option.value)
                    );
                }
            });
        });
    });
};



(function ($) {
    $.fn.extend({
        //plugin name - animatemenu
        ShowProgress: function () {
            return this.each(function () {
                var obj = $(this);
                if (obj.hasClass("RBGprogress")) {


                    var bgCol = "white", prCol = "auto", Val = "50";
                    if (obj.data("bgcolor")) { bgCol = obj.data("bgcolor") }
                    if (obj.data("progresscolor")) { prCol = obj.data("progresscolor") }
                    if (obj.data("value")) { Val = obj.data("value") }
                    obj.css("width", "100%")
                    obj.css("background-color", bgCol)
                    if (Val > 100) { Val = 100 }
                    if (prCol == "auto") {
                        if (Val < 25) { prCol = "#8e0000" }
                        if (Val < 50 && Val >= 25) { prCol = "#b13c00" }
                        if (Val < 75 && Val >= 50) { prCol = "#ffff00" }
                        if (Val >= 75) { prCol = "#00a100" }
                    }

                    var str = '<div style="height:100%;margin:0px;padding:0px;top:0px;left:0px;width:' + Val + '%;background-color:' + prCol + '" ></div>'
                    obj.html(str)
                }
            });
        }
    });
})(jQuery);


function SkinDone(result) {
    //ShowPopup("Success", result);
   // window.location.reload();
}
function SkinFail(ex) {
    ShowPopup("Fail", ex.get_message());
}

//Function on Load SiteMaster
function loadMasterEvents() {
    $("#BGFont > label").click(function () {

        Theme_Body_Font.removeClass(_Theme_Body_Font);
        Theme_Body_Font.addClass($(this).attr('title'));
        _Theme_Body_Font = $(this).attr('title');
        var g = $(this);
        g.className = (_Theme_Body_Font);
        RIYA_V03.RIYAService.SetTheme("BGFont", $(this).attr('title'), SkinDone, SkinFail);
        
        $("g").children().each(function (index, value) {
            $(value).attr("fill", $("#riyaMainTitle").css("color"));
        });
    });
    $("#SKINFont > label").click(function () {
        Theme_Menu_Font.removeClass(_Theme_Menu_Font);
        Theme_Menu_Font.addClass($(this).attr('title'));
        _Theme_Menu_Font = $(this).attr('title');
        var g = $(this);
        g.className = (_Theme_Menu_Font);
        RIYA_V03.RIYAService.SetTheme("SKINFont", $(this).attr('title'), SkinDone, SkinFail);
       
      
            
      
    });
    $("#BackColr > div").click(function () {

        Theme_Body_BG.removeClass(_Theme_Body_BG);
        Theme_Body_BG.addClass($(this).attr('title'));
        _Theme_Body_BG = $(this).attr('title');
        var g = $(this);
        g.className = (_Theme_Body_BG);
        RIYA_V03.RIYAService.SetTheme("Background", $(this).attr('title'), SkinDone, SkinFail);
       

    });
    $("#SKINColor > div").click(function () {

        Theme_Menu_BG.removeClass(_Theme_Menu_BG);
        Theme_Menu_BG.addClass($(this).attr('title'));
        _Theme_Menu_BG = $(this).attr('title');
        var g = $(this);
        g.className = (_Theme_Menu_BG);
        RIYA_V03.RIYAService.SetTheme("Skin", $(this).attr('title'), SkinDone, SkinFail);
       

    });
}
//Function on Load SiteMaster

//Code to send email
var emailbody, emailstyles, attTitle;
var emailwindow;

function createPopupWin(pageURL, pageTitle,
                   popupWinWidth, popupWinHeight) {
    var left = (screen.width - popupWinWidth) / 2;
    var top = (screen.height - popupWinHeight) / 4;

    emailwindow = window.open(pageURL, pageTitle,
            'resizable=0, toolbar=0,titlebar=0,status=0,menubar=0,location=0, width=' + popupWinWidth
            + ', height=' + popupWinHeight + ', top='
            + top + ', left=' + left);

}

//Code on ClientPage email sender
function DownloadHTMLTable(TableName, FileName) {
    var data = document.getElementById(TableName).innerHTML;
    
    var a =
        '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head>\x3c!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>Ark1</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--\x3e<style>td{border:none;font-family: Calibri, sans-serif;} .number{mso-number-format:"0.00";} .text{ mso-number-format:"@";}</style><meta name=ProgId content=Excel.Sheet><meta charset=UTF-8></head><body>' +
        data +
        "</body></html>";
    v(a, "application/vnd.ms-excel");

    function v(a, b) {
        n = window;
        var d = n.navigator,
            f = -1 < d.userAgent.indexOf("WebKit") && 0 > d.userAgent.indexOf("Chrome"),
            c = n.URL || n.webkitURL || n;
        try {
            if (!f) {
                var dd = c.createObjectURL(new n.Blob(["\ufeff" + a], { type: b }));


                var link = document.createElement("a");
                link.setAttribute("href", dd);
                link.setAttribute("download", FileName + ".xls");

                document.body.appendChild(link);
                link.click();
            }
        } catch (N) { console.log(N.message); }
    }

}


function submitForm() {
    MessageBodyHTML.text(superCrypt(MessageBodyHTML.text()));
    txtTO.val(txtTO.val().replace("<", "~").replace(">", "`"));
    txtCC.val(txtCC.val().replace("<", "~").replace(">", "`"));
    txtBCC.val(txtBCC.val().replace("<", "~").replace(">", "`"));
        var iframe = document.getElementById("RBGHTMLFrame");
        var iframeDocument = iframe.contentDocument || iframe.contentWindow.document
        document.getElementById(txtwtfName).value = iframeDocument.head.innerHTML + iframeDocument.body.innerHTML;
        MessageBodyHTML.text(superCrypt(iframeDocument.head.innerHTML + iframeDocument.body.innerHTML));
        return validateEmailAddresses();

    }

    function validateEmailAddresses() {
        var flg = false;
        var msg = "<ul>";
        var adds;
        if (txtTO.val().length > 5) {
            adds = txtTO.val().split(";")
            for (var i = 0; i < adds.length; i++) {
                var s = adds[i];
                var ss = s.trim().replace("~", "").replace("`", "").trim();
                if (!EmailisIN(ss, validEmailExtensions)) {
                    msg = msg + "<li>Email:" + s + " in 'Recipient To' address is not in acceptable Email Domain List</li>"
                    flg = true;
                }
            }
        } else { flg = true; msg = msg + ' <li> Recipient Email Address is not Valid</li>'; }
        if (txtCC.val().length > 5) {
            adds = txtCC.val().split(";")
            for (var i = 0; i < adds.length; i++) {
                var s = adds[i];
                var ss = s.trim().replace(">", "").replace("<", "").trim();
                if (!EmailisIN(ss, validEmailExtensions)) {
                    msg = msg + "<li>Email:" + s + " in 'Recipient CC' address is not in acceptable Email Domain List</li>"
                    flg = true;
                }
            }
        }
        if (txtBCC.val().length > 5) {
            adds = txtBCC.val().split(";")
            for (var i = 0; i < adds.length; i++) {
                var s = adds[i];
                var ss = s.trim().replace(">", "").replace("<", "").trim();
                if (!EmailisIN(ss, validEmailExtensions)) {
                    msg = msg + "<li>Email:" + s + " in 'Recipient CC' address is not in acceptable Email Domain List</li>"
                    flg = true;
                }
            }
        }
        if (txtSubject.val().length < 5) { flg = true; msg = msg + ' <li>Subject must be atleast 5 characters long</li>'; }
        if ($("#" + txtwtfName).val().length < 5) { flg = true; msg = msg + ' <li>Message Body Must not be blank</li>'; }
        if (flg) {
            ShowConfirmPopup('Error Sending Email', msg);
            return false;
        } else {
            return true;
        }
    }

    function EmailisIN(searchString, inArray) {

        var flg = false;
        if (searchString.length > 5) {
            for (var i = 0; i < inArray.length; i++) {
                if (searchString.toLowerCase().endsWith(inArray[i])) {
                    flg = true;
                    break;
                }
            }
        } else { flg = true }
        return flg;
    }


    function ShowLoginPopup() {
        alert("All Emails generated here will be sent through tmlbes@gmail.com")
        txtSenderID.val(txtSenderUID.val());
        txtSenderPWD.val(txtSenderUID.val());
        $("#closeWindow").hide();
        $("#saveCredentials").show();
        $("#closeWindow").show();
        $("#MyPopup").modal({ backdrop: 'static', keyboard: false });
    }

    function ShowConfirmPopup(title, body) {
        $("#ConfirmPopup .modal-title").html(title);
        $("#ConfirmPopup .modal-body").html(body);
        $("#ConfirmPopup").modal({ backdrop: 'static', keyboard: false });
    }

    function HideModal() {
        txtSenderUID.val(txtSenderID.val());
        txtSenderUID.val(txtSenderPWD.val());
        $('#MyPopup').modal('hide');
    }
    function closeMe() {
        window.close();
    }

    function ShowField(xx, yy) {    //Auto populate CC and BCC for Email Sender
        if ($("#" + yy).hasClass("yinvisible")) {
            $("#" + yy).removeClass("yinvisible");
            $(xx).text($(xx).text().replace("Show", "Hide"))
        } else {
            $("#" + yy).addClass("yinvisible");
            $(xx).text($(xx).text().replace("Hide", "Show"))
        }
        window.resizeTo(800, $(".box-body").height() + $(".box-footer").height()+55);// $(".box-body").height() + $(".box-footer").height();
    };
    window.onresize = doResize;
    $(document).ready(doResize);
        function doResize() {

            try {
                var xds = (window.innerHeight - 285).toString() + 'px !important';
                var fds = (window.innerHeight - 185).toString();
                //console.log(xds);
                if (BodyNameX) { document.getElementById(BodyNameX).style.height = (window.innerHeight - 285).toString() + 'px !important'; }
                if (document.getElementsByTagName("iframe")[0]) { (document.getElementsByTagName("iframe")[0]).style.height = (window.innerHeight - 285).toString() + 'px !important'; }
                document.getElementsByClassName("superFrame")[0].style.height = fds;

            } catch (ex) {
                if (ex.message != "Cannot read properties of undefined (reading 'style')") {
                    console.log(ex.message);
                }
            }


        }


//cut here
//code to send email

    function cpcpkChart(divname, categor, datax, TitleText) {
        var xOptions;
        var cpkChart = { backgroundColor: 'rgba(128,255,128,0)', zoomType: 'xy' };
        var cpkTitle = { text: '' };

        var cpkYaxis = [{ labels: { format: '{value}', style: { color: 'black' } }, title: { text: 'Count' } }];
        var cpkplotOptions = { column: { dataLabels: { enabled: true } } };
        if (TitleText) {
            Xoptions = {
                title:{
                    enabled:true,text:TitleText
                },
                legend: {
                    enabled: false
                },
                chart: cpkChart,  yAxis: cpkYaxis, plotOptions: cpkplotOptions,
                xAxis: [{ categories: categor, crosshair: true, name: 'Reading Value' }],
                series: [{
                    name: 'CountsOnColumn',
                    type: 'column',
                    color: '#b65400',
                    data: datax,
                }
                , {
                    name: 'CountsOnSpline',
                    type: 'spline',
                    color: '#850094',
                    data: datax,

                }]
            }
        }
        else {
            Xoptions = {
               
                legend: {
                    enabled: false
                },
                chart: cpkChart, title: cpkTitle, yAxis: cpkYaxis, plotOptions: cpkplotOptions,
                xAxis: [{ categories: categor, crosshair: true, name: 'Reading Value' }],
                series: [{
                    name: 'CountsOnColumn',
                    type: 'column',
                    color: '#b65400',
                    data: datax,
                }
                , {
                    name: 'CountsOnSpline',
                    type: 'spline',
                    color: '#850094',
                    data: datax,

                }]
            }
        }
        RBGcharts.chart(divname, Xoptions);
    }

// extensions of basic javascript objects


    function GetMaxTotal(x, y) {
        var X = -99999999999999999.9;
        for (var i = 0; i < x.length; i++) {
            if (X < x[i] + y[i]) { X = x[i] + y[i]; }
        }

        return X * 1.5;
    }


    if (!Array.prototype.Max) {       
            Array.prototype.Max= function () {
                var i = 0;
                var res = -9999999999999999999999.9;
                for (i = 0; i < this.length; i++) {
                    if(this[i] > res){res=this[i]}
                }
                return res;
            }       
    }
    if (!Array.prototype.Min) {        
        Array.prototype.Min= function () {
                var i = 0;
                var res = 9999999999999999999999.9;
                for (i = 0; i < this.length; i++) {
                    if (this[i] < res) { res = this[i] }
                }
                return res;
            }        
    }

    if (!Array.prototype.Total) {       
            Array.prototype.Total= function () {
                var i = 0;
                var res = 0;
                for (i = 0; i < this.length; i++) {
                    res = res + this[i];
                }
                return res;
            }        
    }


if (!String.prototype.startsWith) {
    Object.defineProperty(String.prototype, 'startsWith', {
        value: function (search, rawPos) {
            var pos = rawPos > 0 ? rawPos | 0 : 0;
            return this.substring(pos, pos + search.length) === search;
        }
    });
}
if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (searchString, position) {
        var subjectString = this.toString();
        if (typeof position !== 'number' || !isFinite(position)
            || Math.floor(position) !== position || position > subjectString.length) {
            position = subjectString.length;
        }
        position -= searchString.length;
        var lastIndex = subjectString.indexOf(searchString, position);
        return lastIndex !== -1 && lastIndex === position;
    };
}

// extensions of basic javascript objects
function rbg() {

    var x = document.location.toString();
    if (x.toUpperCase().startsWith("FILE")) { return true;}
    var x = Request.AppServer().toUpperCase().split(":")[0];

     
    if (validServers.indexOf(x)<0) {
        alert("RBG Charts is IPR or Ravindra Gaikwad, it is under development and not availabel for distribution");
        return false;

    }
    else { return true;}
}

function drawORg(obj, radius,cap) {
   

    RBGcharts.chart(obj, {
        chart: {

            inverted: true
        },

        title: {
            text: ChartTitle
        },
        subtitle: {
            text: ChartSubTitle
        },

        accessibility: {
            point: {
                descriptionFormatter: function (point) {
                    var nodeName = point.toNode.name,
                        nodeId = point.toNode.id,
                        nodeDesc = nodeName === nodeId ? nodeName : nodeName + ', ' + nodeId,
                        parentDesc = point.fromNode.id;
                    return point.index + '. ' + nodeDesc + ', reports to ' + parentDesc + '.';
                }
            }
        },

        series: [{
            type: 'RBGOrgchart',
            name: ChartTitle,
            animation:false,
            linkRadius: radius,
            linkLineWidth: 3,
            linkColor: 'navy',
            linecap: cap,
            keys: ['from', 'to'],
            data: Hierarchy,
            nodes: Nodesx,
            colorByPoint: false,
            color: '#007ad0',
            dataLabels: {
                color: 'white'
            },
            borderColor: 'white',

        }],
        tooltip: {
            outside: true
        },
        exporting: {
            allowHTML: true,
            sourceWidth: 800,
            sourceHeight: 600
        }

    });
}


(function ($) {

    $.fn.fitText = function (kompressor, options) {

        // Setup options
        var compressor = kompressor || 1,
            settings = $.extend({
                'minFontSize': Number.NEGATIVE_INFINITY,
                'maxFontSize': Number.POSITIVE_INFINITY
            }, options);

        return this.each(function () {

            // Store the object
            var $this = $(this);
            //$this.text().length
            // Resizer() resizes items based on the object width divided by the compressor * 10
            var resizer = function () {
                $this.css('font-size', Math.max(Math.min(($this.width() + parseInt($this.css('padding-left')) + parseInt($this.css('padding-right'))) / (compressor * $this.text().length), parseFloat(settings.maxFontSize)), parseFloat(settings.minFontSize)) - 1);
            };

            // Call once to set.
            resizer();

            // Call on resize. Opera debounces their resize by default.
            $(window).on('resize.fitText orientationchange.fitText', resizer);

        });

    };

})(jQuery);

$(".RBGprogress").ShowProgress()
var emailattbodyx;



function ShowPopup(title, body, isError=false,onOK=null ) {

    $("#MyPopup .modal-title").html(title);
    $("#MyPopup .modal-body").html(body);
    $("#MyPopup").modal({ backdrop: 'static', keyboard: false });
    if (isError) { $("#MyPopup").toggleClass("bg-danger text-danger", "bg-info text-dark"); }
    $("#DoneBtnPop ").click(onOK);
}

// this part below to be used in future for page emailer
function css(a) {
    var sheets = document.styleSheets, o = {};
    for (var i in sheets) {
        var rules = sheets[i].rules || sheets[i].cssRules;
        for (var r in rules) {
            if (a.is(rules[r].selectorText)) {
                o = $.extend(o, css2json(rules[r].style), css2json(a.attr('style')));
            }
        }
    }
    var xtr = ""
    for (i = 0; i < Object.entries(o).length; i++) {
        xtr = xtr + Object.entries(o)[i][0] + ":" + Object.entries(o)[i][1] + ";"
    }
    return xtr;
}

function css2json(css) {
    var s = {};
    if (!css) return s;
    if (css instanceof CSSStyleDeclaration) {
        for (var i in css) {
            if ((css[i]).toLowerCase) {
                s[(css[i]).toLowerCase()] = (css[css[i]]);
            }
        }
    } else if (typeof css == "string") {
        css = css.split("; ");
        for (var i in css) {
            var l = css[i].split(": ");
            s[l[0].toLowerCase()] = (l[1]);
        }
    }
    return s;
}

function exportPage() {
    var secx = $("#PageDiv").clone();
    var dd = secx.find("*")

    dd.each(function () {
        $(this).attr("style", css($(this)) + $(this).attr("style"));
        $(this).attr("class", "");

    });

    emailattbodyx = (secx.html())
}

function resizeFunctions() {
    try { ShowSiteMap(); } catch (ex) { }
    try { drawLayoutFlowCharts(); } catch (ex) { }
}

function loadFunctions() {
    try { ShowSiteMap(); } catch (ex) { }
    try { drawLayoutFlowCharts(); } catch (ex) { }    
    try{
        $('#MaintaskStartEndDate').daterangepicker({ timePicker: false, locale: { format: 'DD-MMM-YYYY', separator: ' to ' } })
    } catch (ex) { }
    try {
        $('#SubtaskStartEndDate').daterangepicker({ timePicker: false, locale: { format: 'DD-MMM-YYYY', separator: ' to ' } })
    } catch (ex) { }
    try {
        $('#SubTaskComplSlider').slider();
        $('#SubTaskComplSlider').on('slide', function () {
            var xf = $(this).val();
            $("#SubCompletionLabel").text("Completion " + xf + "%");
            if (xf == 100) { $(".slider-handle, .slider-selection").css("background", "green"); }
            if (xf < 100) { $(".slider-handle, .slider-selection").css("background", "yellow"); }
            if (xf < 75) { $(".slider-handle, .slider-selection").css("background", "orange"); }
            if (xf < 50) { $(".slider-handle, .slider-selection").css("background", "lightpink"); }
            if (xf < 25) { $(".slider-handle, .slider-selection").css("background", "red"); }
        });
    }catch (ex){}
    try{
        $('#MainTaskComplSlider').slider();
        $('#MainTaskComplSlider').on('slide', function () {
            var xf = $(this).val();
            $("#CompletionLabel").text("Completion " + xf + "%");
            if (xf == 100) { $(".slider-handle, .slider-selection").css("background", "green"); }
            if (xf < 100) { $(".slider-handle, .slider-selection").css("background", "yellow"); }
            if (xf < 75) { $(".slider-handle, .slider-selection").css("background", "orange"); }
            if (xf < 50) { $(".slider-handle, .slider-selection").css("background", "lightpink"); }
            if (xf < 25) { $(".slider-handle, .slider-selection").css("background", "red"); }
        });
    } catch (ex) { }
    try{
        var att = $("a[title]");
        att.data("toggle", "tooltip");
        var img = $("img[title]");

        img.data("toggle", "tooltip");
        var inp = $("input[title]");
        //inp.tata("toggle", "tooltip");
        inp.tooltip();
        att.tooltip();
        img.tooltip();
    }catch (ex){}
}

function linedraw(elemA, elemB) {

    var aelem = elemA.get()[0].getBoundingClientRect();
    var belem = elemB.get()[0].getBoundingClientRect();
    x1 = aelem.left + ((aelem.width) / 2) + $(document).scrollLeft();
    y1 = aelem.bottom - 2 + $(document).scrollTop();
    x2 = belem.left + ((belem.width) / 2) + $(document).scrollLeft();
    y2 = belem.top + $(document).scrollTop();

    //console.log(x1, rect.right, rect.bottom, rect.left);

    if (x2 < x1) {
        var tmp;
        tmp = x2; x2 = x1; x1 = tmp;
        tmp = y2; y2 = y1; y1 = tmp;
    }
    lineLength = parseInt(Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)));
    m = (y2 - y1) / (x2 - x1);
    degree = Math.atan(m) * 180 / Math.PI;
    var xcsd = document.getElementById("ConnectorsContainer");
    var thkx = 3;
    var colour = "navy"
    var thk;

    thk = 15;
    xcsd.innerHTML += "<div class='line' style='transform-origin: top left; transform: rotate(" + degree + "deg); width: " + lineLength + "px; height: 1px; border-top:" + thkx + "px solid  " + colour + " ; position: absolute; top: " + y1 + "px; left: " + x1 + "px;'></div>";


}


function setSessionState(sxx, syy) {
    var sessurl
    if ($(syy).find("i").first().hasClass("fa-minus")) {
        RIYA_V03.RIYAService.UserCommandAction('SetSession', sxx, 'collapsed-box', SkinDone, SkinFail);
       
    } else {
      
        RIYA_V03.RIYAService.UserCommandAction('SetSession', sxx, 'reallynone', SkinDone, SkinFail);
    }
   
  
}

function setSessionDefaultViewState( valFunction) {
   
    
    RIYA_V03.RIYAService.UserCommandAction('SetSession', 'DefaultSkin', valFunction, SkinDone, SkinFail);

}

function AddMainTaskData() {

    if ($("#projTitleTxt").val() == "New Project") { ShowPopup("Invalid Project Title", "Please Enter Project Name"); }
    else if ($("#projDescription").val() == "") { ShowPopup("Invalid Project Description", "Please Enter Project Description"); }
    else if ($("#taskTitleTxt").val() == "") { ShowPopup("Invalid Task Title", "Please Enter Task Title"); }
    else if ($("#taskDescription").val() == "") { ShowPopup("Invalid Task Description", "Please Enter Task Description"); }
    else {
        var sr="";
        sr = sr + $("#projTitleTxt").val() + "|";
        sr = sr + $("#projDescription").val() + "|";
        sr = sr + $("#taskTitleTxt").val() + "|";
        sr = sr + $("#taskDescription").val() + "|";
        sr = sr + $("#MaintaskStartEndDate").val() + "|";
        sr = sr + $("#MainTaskComplSlider").val() + "|";
        RIYA_V03.RIYAService.UserCommandAction('AddMainTask', curIDxd, sr, SkinDone, SkinFail);
       
     
       
    }


}

function AddSubTaskData() {
    if ($("#subtaskTitleTxt").val() == "") { ShowPopup("Invalid Task Title", "Please Enter Task Description"); }
    else if ($("#subtaskDescription").val() == "") { ShowPopup("Invalid Task Description", "Please Enter Task Description"); }
    else {
        var sr="";
        sr = sr + $("#TaskforSubtask").val() + "|";
        sr = sr + $("#subtaskTitleTxt").val() + "|";
        sr = sr + $("#subtaskDescription").val() + "|";
        sr = sr + $("#SubtaskStartEndDate").val() + "|";
        sr = sr + $("#SubTaskComplSlider").val() + "|";
        RIYA_V03.RIYAService.UserCommandAction('AddSubTask', curIDxd, sr, SkinDone, SkinFail);
       
       
    }
}
function addSubTask(xx, yy) {
    $("#subtaskModalH3").text("Add Sub Task for:" + $(yy).parent().parent().parent().find("h3.box-title").text().trim())
    $("#subTaskModalP").html($(yy).parent().parent().parent().find("p").first().html())
    $("#addSubTaskPopup").modal({ backdrop: 'static', keyboard: false });
    $("#TaskforSubtask").val(xx)

}
function maskTaskCompleted(xx, yy, zz) {

    RIYA_V03.RIYAService.UserCommandAction('TaskDependancy', xx, '', DoDependancy, SkinFail);

    function DoDependancy(result) {
        var x = confirm(result);
        if (x) {
            RIYA_V03.RIYAService.UserCommandAction('CompleteTask', xx, '', SkinDone, SkinFail);
        }
    }
}


function removeTask(xx, yy, zz) {

    RIYA_V03.RIYAService.UserCommandAction('TaskDependancy', xx, '', DoDependancy1, SkinFail);

    function DoDependancy1(result) {
        var x = confirm(result);
        if (x) {
            RIYA_V03.RIYAService.UserCommandAction('RemoveTask', xx, '', SkinDone, SkinFail);
        }
    }
}

function PrintThisPage() {
    HideSkin()
    window.print()
}


function expandSubTasks(xx) {
    var x = $(xx).parent();
    x = x.parent();
    x = x.parent();
    x = x.find("div.box-body");

    x.toggle(200);
    x =$(xx).find ("i");
    if (x.hasClass("fa fa-expand")) {
        x.removeClass("fa fa-expand").addClass("fa fa-compress")
    }
    else {
        x.removeClass("fa fa-compress").addClass("fa fa-expand")
    }
}
function ProjSelectionChanged() {
    $("#projTitleTxt").val($("#SelectProject option:selected").text());
    if ($("#projTitleTxt").val() == "New Project") {
        $("#selprojgrp").show();
        $("#projinfodiv").hide()
    } else {
        var x = $("#selprojgrp");
        x.hide();
        x = $("#SelectProject option:selected");
        $("#projTitleTxt").val(x.text());
        $("#projDescription").val(x.data("description"));
        $("#projDescription").text(x.data("description"));
        $("#projinfodiv").html("<ul> <li> <b>Project Name:</b>" + x.text() + " </li><li><b>Project Description:</b>" + x.data("description") + "</li> <li> <b>Role in Project:</b>" + x.data("projectrole") + " </li> </ul>");
        $("#projinfodiv").show()
    }

}

function addNewTask(xx) {
    if (xx == 0) { ShowPopup("Log In", "Plese log in to add your tasks"); } else {
        var sel = $('#SelectProject');
        $("#selprojgrp").hide();
         function DoneFetch(result) {
            
             if (result.length > 0) {
                 result = result.split("■");

                var opt = new Option()
                opt.value = "New Project";
                opt.text = "New Project";
                opt.selected = "selected"
                sel.find('option').remove();
                sel.append(opt);
                $("#selprojgrp").show();
                for (i = 0; i < result.length; i++) {
                    //1|IoT Server|Initiator|Development of IoT Server
                    var ys = (result[i]).split("²");
                    var opt = $(new Option());
                    opt.val(ys[1]);
                    opt.text(ys[1]);
                    opt.data("projectrole", ys[3]);
                    opt.data("description", ys[2])
                    $('#SelectProject').append(opt);
                }

                $("#addTaskPopup").modal({ backdrop: 'static', keyboard: false });
            };

        }
         RIYA_V03.RIYAService.UserCommandAction('MyTaskProject', xx, '', DoneFetch, SkinFail);
         
    }

  
}



/* BoxRefresh()
 * =========
 * Adds AJAX content control to a box.
 *
 * @Usage: $('#my-box').boxRefresh(options)
 *         or add [data-widget="box-refresh"] to the box element
 *         Pass any option as data-option="value"
 */



function ToggleFullScreen() {

    var rais = document.getElementById("fulscrn");


    if ((document.fullScreenElement && document.fullScreenElement !== null) || (!document.mozFullScreen && !document.webkitIsFullScreen)) {
        if (document.documentElement.requestFullScreen) {
            document.documentElement.requestFullScreen();
        } else if (document.documentElement.mozRequestFullScreen) {
            document.documentElement.mozRequestFullScreen();
        } else if (document.documentElement.webkitRequestFullScreen) {
            document.documentElement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
        }
        rais.className = "fa fa-compress";
    } else {
        if (document.cancelFullScreen) {
            document.cancelFullScreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.webkitCancelFullScreen) {
            document.webkitCancelFullScreen();
        }
        rais.className = "glyphicon glyphicon-fullscreen";
    }

}

    function CheckConnections() {
        fram.src = fram.src
    }



    function HideSkin( x ) {
        $("aside").hide();
        $("header").hide();
        $("footer").hide();
        $("#showpanelnow").show();
        $("#PageDiv").removeClass("content-wrapper");
        if (x = 'nono') {

        } else {
            setSessionDefaultViewState("HideSkin();")
        }
       
        $("#TataCA").css("display", "block")
        $(".print-only").show();
    }

    function ShowSkin( x ) {
        $("aside").show();
        $("header").show();
        $("footer").show();
        $("#PageDiv").addClass("content-wrapper");
        $("#showpanelnow").hide();
        if (x = 'nono') {

        } else {
            setSessionDefaultViewState("HideSkin();")
        }
        $("#TataCA").css("display", "none")
        $(".print-only").hide();
    }

 

+function ($) {
    'use strict';
   


    //side panel personalization ends here

    var DataKey = 'lte.boxrefresh';

    var Default = {
        source: '',
        params: {},
        trigger: '.refresh-btn',
        content: '.box-body',
        loadInContent: true,
        responseType: '',
        overlayTemplate: '<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>',
        onLoadStart: function () {
        },
        onLoadDone: function (response) {
            return response;
        }
    };

    var Selector = {
        data: '[data-widget="box-refresh"]'
    };

    // BoxRefresh Class Definition
    // =========================
    var BoxRefresh = function (element, options) {
        this.element = element;
        this.options = options;
        this.$overlay = $(options.overlayTemplate);

        if (options.source === '') {
            throw new Error('Source url was not defined. Please specify a url in your BoxRefresh source option.');
        }

        this._setUpListeners();
        this.load();
    };

    BoxRefresh.prototype.load = function () {
        this._addOverlay();
        this.options.onLoadStart.call($(this));

        $.get(this.options.source, this.options.params, function (response) {
            if (this.options.loadInContent) {
                $(this.element).find(this.options.content).html(response);
            }
            this.options.onLoadDone.call($(this), response);
            this._removeOverlay();
        }.bind(this), this.options.responseType !== '' && this.options.responseType);
    };

    // Private

    BoxRefresh.prototype._setUpListeners = function () {
        $(this.element).on('click', this.options.trigger, function (event) {
            if (event) event.preventDefault();
            this.load();
        }.bind(this));
    };

    BoxRefresh.prototype._addOverlay = function () {
        $(this.element).append(this.$overlay);
    };

    BoxRefresh.prototype._removeOverlay = function () {
        $(this.$overlay).remove();
    };

    // Plugin Definition
    // =================
    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data(DataKey);

            if (!data) {
                var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);
                $this.data(DataKey, (data = new BoxRefresh($this, options)));
            }

            if (typeof data == 'string') {
                if (typeof data[option] == 'undefined') {
                    throw new Error('No method named ' + option);
                }
                data[option]();
            }
        });
    }

    var old = $.fn.boxRefresh;

    $.fn.boxRefresh = Plugin;
    $.fn.boxRefresh.Constructor = BoxRefresh;

    // No Conflict Mode
    // ================
    $.fn.boxRefresh.noConflict = function () {
        $.fn.boxRefresh = old;
        return this;
    };

    // BoxRefresh Data API
    // =================
    $(window).on('load', function () {
        $(Selector.data).each(function () {
            Plugin.call($(this));
        });
    });

}(jQuery);


/* BoxWidget()
 * ======
 * Adds box widget functions to boxes.
 *
 * @Usage: $('.my-box').boxWidget(options)
 *         This plugin auto activates on any element using the `.box` class
 *         Pass any option as data-option="value"
 */
+function ($) {
    'use strict';

    var DataKey = 'lte.boxwidget';

    var Default = {
        animationSpeed: 500,
        collapseTrigger: '[data-widget="collapse"]',
        removeTrigger: '[data-widget="remove"]',
        collapseIcon: 'fa-minus',
        expandIcon: 'fa-plus',
        removeIcon: 'fa-times'
    };

    var Selector = {
        data: '.box',
        collapsed: '.collapsed-box',
        header: '.box-header',
        body: '.box-body',
        footer: '.box-footer',
        tools: '.box-tools'
    };

    var ClassName = {
        collapsed: 'collapsed-box'
    };

    var Event = {
        collapsing: 'collapsing.boxwidget',
        collapsed: 'collapsed.boxwidget',
        expanding: 'expanding.boxwidget',
        expanded: 'expanded.boxwidget',
        removing: 'removing.boxwidget',
        removed: 'removed.boxwidget'
    };

    // BoxWidget Class Definition
    // =====================
    var BoxWidget = function (element, options) {
        this.element = element;
        this.options = options;

        this._setUpListeners();
    };

    BoxWidget.prototype.toggle = function () {
        var isOpen = !$(this.element).is(Selector.collapsed);

        if (isOpen) {
            this.collapse();
        } else {
            this.expand();
        }
    };

    BoxWidget.prototype.expand = function () {
        var expandedEvent = $.Event(Event.expanded);
        var expandingEvent = $.Event(Event.expanding);
        var collapseIcon = this.options.collapseIcon;
        var expandIcon = this.options.expandIcon;

        $(this.element).removeClass(ClassName.collapsed);

        $(this.element)
          .children(Selector.header + ', ' + Selector.body + ', ' + Selector.footer)
          .children(Selector.tools)
          .find('.' + expandIcon)
          .removeClass(expandIcon)
          .addClass(collapseIcon);

        $(this.element).children(Selector.body + ', ' + Selector.footer)
          .slideDown(this.options.animationSpeed, function () {
              $(this.element).trigger(expandedEvent);
          }.bind(this))
          .trigger(expandingEvent);
    };

    BoxWidget.prototype.collapse = function () {
        var collapsedEvent = $.Event(Event.collapsed);
        var collapsingEvent = $.Event(Event.collapsing);
        var collapseIcon = this.options.collapseIcon;
        var expandIcon = this.options.expandIcon;

        $(this.element)
          .children(Selector.header + ', ' + Selector.body + ', ' + Selector.footer)
          .children(Selector.tools)
          .find('.' + collapseIcon)
          .removeClass(collapseIcon)
          .addClass(expandIcon);

        $(this.element).children(Selector.body + ', ' + Selector.footer)
          .slideUp(this.options.animationSpeed, function () {
              $(this.element).addClass(ClassName.collapsed);
              $(this.element).trigger(collapsedEvent);
          }.bind(this))
          .trigger(collapsingEvent);
    };

    BoxWidget.prototype.remove = function () {
        var removedEvent = $.Event(Event.removed);
        var removingEvent = $.Event(Event.removing);

        $(this.element).slideUp(this.options.animationSpeed, function () {
            $(this.element).trigger(removedEvent);
            $(this.element).remove();
        }.bind(this))
        .trigger(removingEvent);
    };

    // Private

    BoxWidget.prototype._setUpListeners = function () {
        var that = this;

        $(this.element).on('click', this.options.collapseTrigger, function (event) {
            if (event) event.preventDefault();
            that.toggle($(this));
            return false;
        });

        $(this.element).on('click', this.options.removeTrigger, function (event) {
            if (event) event.preventDefault();
            that.remove($(this));
            return false;
        });
    };

    // Plugin Definition
    // =================
    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data(DataKey);

            if (!data) {
                var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);
                $this.data(DataKey, (data = new BoxWidget($this, options)));
            }

            if (typeof option == 'string') {
                if (typeof data[option] == 'undefined') {
                    throw new Error('No method named ' + option);
                }
                data[option]();
            }
        });
    }

    var old = $.fn.boxWidget;

    $.fn.boxWidget = Plugin;
    $.fn.boxWidget.Constructor = BoxWidget;

    // No Conflict Mode
    // ================
    $.fn.boxWidget.noConflict = function () {
        $.fn.boxWidget = old;
        return this;
    };

    // BoxWidget Data API
    // ==================
    $(window).on('load', function () {
        $(Selector.data).each(function () {
            Plugin.call($(this));
        });
    });
}(jQuery);


/* ControlSidebar()
 * ===============
 * Toggles the state of the control sidebar
 *
 * @Usage: $('#control-sidebar-trigger').controlSidebar(options)
 *         or add [data-toggle="control-sidebar"] to the trigger
 *         Pass any option as data-option="value"
 */
+function ($) {
    'use strict';

    var DataKey = 'lte.controlsidebar';

    var Default = {
        controlsidebarSlide: true
    };

    var Selector = {
        sidebar: '.control-sidebar',
        data: '[data-toggle="control-sidebar"]',
        open: '.control-sidebar-open',
        bg: '.control-sidebar-bg',
        wrapper: '.wrapper',
        content: '.content-wrapper',
        boxed: '.layout-boxed'
    };

    var ClassName = {
        open: 'control-sidebar-open',
        transition: 'control-sidebar-hold-transition',
        fixed: 'fixed'
    };

    var Event = {
        collapsed: 'collapsed.controlsidebar',
        expanded: 'expanded.controlsidebar'
    };

    // ControlSidebar Class Definition
    // ===============================
    var ControlSidebar = function (element, options) {
        this.element = element;
        this.options = options;
        this.hasBindedResize = false;

        this.init();
    };

    ControlSidebar.prototype.init = function () {
        // Add click listener if the element hasn't been
        // initialized using the data API
        if (!$(this.element).is(Selector.data)) {
            $(this).on('click', this.toggle);
        }

        this.fix();
        $(window).resize(function () {
            this.fix();
        }.bind(this));
    };

    ControlSidebar.prototype.toggle = function (event) {
        if (event) event.preventDefault();

        this.fix();

        if (!$(Selector.sidebar).is(Selector.open) && !$('body').is(Selector.open)) {
            this.expand();
        } else {
            this.collapse();
        }
    };

    ControlSidebar.prototype.expand = function () {
        $(Selector.sidebar).show();
        if (!this.options.controlsidebarSlide) {
            $('body').addClass(ClassName.transition).addClass(ClassName.open).delay(50).queue(function () {
                $('body').removeClass(ClassName.transition);
                $(this).dequeue()
            })
        } else {
            $(Selector.sidebar).addClass(ClassName.open);
        }


        $(this.element).trigger($.Event(Event.expanded));
    };

    ControlSidebar.prototype.collapse = function () {
        if (!this.options.controlsidebarSlide) {
            $('body').addClass(ClassName.transition).removeClass(ClassName.open).delay(50).queue(function () {
                $('body').removeClass(ClassName.transition);
                $(this).dequeue()
            })
        } else {
            $(Selector.sidebar).removeClass(ClassName.open);
        }
        $(Selector.sidebar).fadeOut();
        $(this.element).trigger($.Event(Event.collapsed));
    };

    ControlSidebar.prototype.fix = function () {
        if ($('body').is(Selector.boxed)) {
            this._fixForBoxed($(Selector.bg));
        }
    };

    // Private

    ControlSidebar.prototype._fixForBoxed = function (bg) {
        bg.css({
            position: 'absolute',
            height: $(Selector.wrapper).height()
        });
    };

    // Plugin Definition
    // =================
    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data(DataKey);

            if (!data) {
                var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);
                $this.data(DataKey, (data = new ControlSidebar($this, options)));
            }

            if (typeof option == 'string') data.toggle();
        });
    }

    var old = $.fn.controlSidebar;

    $.fn.controlSidebar = Plugin;
    $.fn.controlSidebar.Constructor = ControlSidebar;

    // No Conflict Mode
    // ================
    $.fn.controlSidebar.noConflict = function () {
        $.fn.controlSidebar = old;
        return this;
    };

    // ControlSidebar Data API
    // =======================
    $(document).on('click', Selector.data, function (event) {
        if (event) event.preventDefault();
        Plugin.call($(this), 'toggle');
    });

}(jQuery);


/* DirectChat()
 * ===============
 * Toggles the state of the control sidebar
 *
 * @Usage: $('#my-chat-box').directChat()
 *         or add [data-widget="direct-chat"] to the trigger
 */
+function ($) {
    'use strict';

    var DataKey = 'lte.directchat';

    var Selector = {
        data: '[data-widget="chat-pane-toggle"]',
        box: '.direct-chat'
    };

    var ClassName = {
        open: 'direct-chat-contacts-open'
    };

    // DirectChat Class Definition
    // ===========================
    var DirectChat = function (element) {
        this.element = element;
    };

    DirectChat.prototype.toggle = function ($trigger) {
        $trigger.parents(Selector.box).first().toggleClass(ClassName.open);
    };

    // Plugin Definition
    // =================
    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data(DataKey);

            if (!data) {
                $this.data(DataKey, (data = new DirectChat($this)));
            }

            if (typeof option == 'string') data.toggle($this);
        });
    }

    var old = $.fn.directChat;

    $.fn.directChat = Plugin;
    $.fn.directChat.Constructor = DirectChat;

    // No Conflict Mode
    // ================
    $.fn.directChat.noConflict = function () {
        $.fn.directChat = old;
        return this;
    };

    // DirectChat Data API
    // ===================
    $(document).on('click', Selector.data, function (event) {
        if (event) event.preventDefault();
        Plugin.call($(this), 'toggle');
    });

}(jQuery);


/* PushMenu()
 * ==========
 * Adds the push menu functionality to the sidebar.
 *
 * @usage: $('.btn').pushMenu(options)
 *          or add [data-toggle="push-menu"] to any button
 *          Pass any option as data-option="value"
 */
+function ($) {
    'use strict';

    var DataKey = 'lte.pushmenu';

    var Default = {
        collapseScreenSize: 767,
        expandOnHover: false,
        expandTransitionDelay: 200
    };

    var Selector = {
        collapsed: '.sidebar-collapse',
        open: '.sidebar-open',
        mainSidebar: '.main-sidebar',
        contentWrapper: '.content-wrapper',
        searchInput: '.sidebar-form .form-control',
        button: '[data-toggle="push-menu"]',
        mini: '.sidebar-mini',
        expanded: '.sidebar-expanded-on-hover',
        layoutFixed: '.fixed'
    };

    var ClassName = {
        collapsed: 'sidebar-collapse',
        open: 'sidebar-open',
        mini: 'sidebar-mini',
        expanded: 'sidebar-expanded-on-hover',
        expandFeature: 'sidebar-mini-expand-feature',
        layoutFixed: 'fixed'
    };

    var Event = {
        expanded: 'expanded.pushMenu',
        collapsed: 'collapsed.pushMenu'
    };

    // PushMenu Class Definition
    // =========================
    var PushMenu = function (options) {
        this.options = options;
        this.init();
    };

    PushMenu.prototype.init = function () {
        if (this.options.expandOnHover
          || ($('body').is(Selector.mini + Selector.layoutFixed))) {
            this.expandOnHover();
            $('body').addClass(ClassName.expandFeature);
        }

        $(Selector.contentWrapper).click(function () {
            // Enable hide menu when clicking on the content-wrapper on small screens
            if ($(window).width() <= this.options.collapseScreenSize && $('body').hasClass(ClassName.open)) {
                this.close();
            }
        }.bind(this));

        // __Fix for android devices
        $(Selector.searchInput).click(function (e) {
            e.stopPropagation();
        });
    };

    PushMenu.prototype.toggle = function () {
        var windowWidth = $(window).width();
        var isOpen = !$('body').hasClass(ClassName.collapsed);

        if (windowWidth <= this.options.collapseScreenSize) {
            isOpen = $('body').hasClass(ClassName.open);
        }

        if (!isOpen) {
            this.open();
        } else {
            this.close();
        }
    };

    PushMenu.prototype.open = function () {
        var windowWidth = $(window).width();

        if (windowWidth > this.options.collapseScreenSize) {
            $('body').removeClass(ClassName.collapsed)
              .trigger($.Event(Event.expanded));
        }
        else {
            $('body').addClass(ClassName.open)
              .trigger($.Event(Event.expanded));
        }
    };

    PushMenu.prototype.close = function () {
        var windowWidth = $(window).width();
        if (windowWidth > this.options.collapseScreenSize) {
            $('body').addClass(ClassName.collapsed)
              .trigger($.Event(Event.collapsed));
        } else {
            $('body').removeClass(ClassName.open + ' ' + ClassName.collapsed)
              .trigger($.Event(Event.collapsed));
        }
    };

    PushMenu.prototype.expandOnHover = function () {
        $(Selector.mainSidebar).hover(function () {
            if ($('body').is(Selector.mini + Selector.collapsed)
              && $(window).width() > this.options.collapseScreenSize) {
                this.expand();
            }
        }.bind(this), function () {
            if ($('body').is(Selector.expanded)) {
                this.collapse();
            }
        }.bind(this));
    };

    PushMenu.prototype.expand = function () {
        setTimeout(function () {
            $('body').removeClass(ClassName.collapsed)
              .addClass(ClassName.expanded);
        }, this.options.expandTransitionDelay);
    };

    PushMenu.prototype.collapse = function () {
        setTimeout(function () {
            $('body').removeClass(ClassName.expanded)
              .addClass(ClassName.collapsed);
        }, this.options.expandTransitionDelay);
    };

    // PushMenu Plugin Definition
    // ==========================
    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data(DataKey);

            if (!data) {
                var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);
                $this.data(DataKey, (data = new PushMenu(options)));
            }

            if (option === 'toggle') data.toggle();
        });
    }

    var old = $.fn.pushMenu;

    $.fn.pushMenu = Plugin;
    $.fn.pushMenu.Constructor = PushMenu;

    // No Conflict Mode
    // ================
    $.fn.pushMenu.noConflict = function () {
        $.fn.pushMenu = old;
        return this;
    };

    // Data API
    // ========
    $(document).on('click', Selector.button, function (e) {
        e.preventDefault();
        Plugin.call($(this), 'toggle');
    });
    $(window).on('load', function () {
        Plugin.call($(Selector.button));
    });
}(jQuery);


/* TodoList()
 * =========
 * Converts a list into a todoList.
 *
 * @Usage: $('.my-list').todoList(options)
 *         or add [data-widget="todo-list"] to the ul element
 *         Pass any option as data-option="value"
 */
+function ($) {
    'use strict';

    var DataKey = 'lte.todolist';

    var Default = {
        onCheck: function (item) {
            return item;
        },
        onUnCheck: function (item) {
            return item;
        }
    };

    var Selector = {
        data: '[data-widget="todo-list"]'
    };

    var ClassName = {
        done: 'done'
    };

    // TodoList Class Definition
    // =========================
    var TodoList = function (element, options) {
        this.element = element;
        this.options = options;

        this._setUpListeners();
    };

    TodoList.prototype.toggle = function (item) {
        item.parents(Selector.li).first().toggleClass(ClassName.done);
        if (!item.prop('checked')) {
            this.unCheck(item);
            return;
        }

        this.check(item);
    };

    TodoList.prototype.check = function (item) {
        this.options.onCheck.call(item);
    };

    TodoList.prototype.unCheck = function (item) {
        this.options.onUnCheck.call(item);
    };

    // Private

    TodoList.prototype._setUpListeners = function () {
        var that = this;
        $(this.element).on('change ifChanged', 'input:checkbox', function () {
            that.toggle($(this));
        });
    };

    // Plugin Definition
    // =================
    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data(DataKey);

            if (!data) {
                var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);
                $this.data(DataKey, (data = new TodoList($this, options)));
            }

            if (typeof data == 'string') {
                if (typeof data[option] == 'undefined') {
                    throw new Error('No method named ' + option);
                }
                data[option]();
            }
        });
    }

    var old = $.fn.todoList;

    $.fn.todoList = Plugin;
    $.fn.todoList.Constructor = TodoList;

    // No Conflict Mode
    // ================
    $.fn.todoList.noConflict = function () {
        $.fn.todoList = old;
        return this;
    };

    // TodoList Data API
    // =================
    $(window).on('load', function () {
        $(Selector.data).each(function () {
            Plugin.call($(this));
        });
    });

}(jQuery);


/* Tree()
 * ======
 * Converts a nested list into a multilevel
 * tree view menu.
 *
 * @Usage: $('.my-menu').tree(options)
 *         or add [data-widget="tree"] to the ul element
 *         Pass any option as data-option="value"
 */
+function ($) {
    'use strict';

    var DataKey = 'lte.tree';

    var Default = {
        animationSpeed: 500,
        accordion: true,
        followLink: false,
        trigger: '.treeview a'
    };

    var Selector = {
        tree: '.tree',
        treeview: '.treeview',
        treeviewMenu: '.treeview-menu',
        open: '.menu-open, .active',
        li: 'li',
        data: '[data-widget="tree"]',
        active: '.active'
    };

    var ClassName = {
        open: 'menu-open',
        tree: 'tree'
    };

    var Event = {
        collapsed: 'collapsed.tree',
        expanded: 'expanded.tree'
    };

    // Tree Class Definition
    // =====================
    var Tree = function (element, options) {
        this.element = element;
        this.options = options;

        $(this.element).addClass(ClassName.tree);

        $(Selector.treeview + Selector.active, this.element).addClass(ClassName.open);

        this._setUpListeners();
    };

    Tree.prototype.toggle = function (link, event) {
        var treeviewMenu = link.next(Selector.treeviewMenu);
        var parentLi = link.parent();
        var isOpen = parentLi.hasClass(ClassName.open);

        if (!parentLi.is(Selector.treeview)) {
            return;
        }

        if (!this.options.followLink || link.attr('href') === '#') {
            event.preventDefault();
        }

        if (isOpen) {
            this.collapse(treeviewMenu, parentLi);
        } else {
            this.expand(treeviewMenu, parentLi);
        }
    };

    Tree.prototype.expand = function (tree, parent) {
        var expandedEvent = $.Event(Event.expanded);

        if (this.options.accordion) {
            var openMenuLi = parent.siblings(Selector.open);
            var openTree = openMenuLi.children(Selector.treeviewMenu);
            this.collapse(openTree, openMenuLi);
        }

        parent.addClass(ClassName.open);
        tree.slideDown(this.options.animationSpeed, function () {
            $(this.element).trigger(expandedEvent);
            parent.height('auto');
        }.bind(this));
    };

    Tree.prototype.collapse = function (tree, parentLi) {
        var collapsedEvent = $.Event(Event.collapsed);

        //tree.find(Selector.open).removeClass(ClassName.open);
        parentLi.removeClass(ClassName.open);
        tree.slideUp(this.options.animationSpeed, function () {
            //tree.find(Selector.open + ' > ' + Selector.treeview).slideUp();
            $(this.element).trigger(collapsedEvent);

            // Collapse child items
            parentLi.find(Selector.treeview).removeClass(ClassName.open).find(Selector.treeviewMenu).hide();
        }.bind(this));
    };

    // Private

    Tree.prototype._setUpListeners = function () {
        var that = this;

        $(this.element).on('click', this.options.trigger, function (event) {
            that.toggle($(this), event);
        });
    };

    // Plugin Definition
    // =================
    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data(DataKey);

            if (!data) {
                var options = $.extend({}, Default, $this.data(), typeof option == 'object' && option);
                $this.data(DataKey, new Tree($this, options));
            }
        });
    }

    var old = $.fn.tree;

    $.fn.tree = Plugin;
    $.fn.tree.Constructor = Tree;

    // No Conflict Mode
    // ================
    $.fn.tree.noConflict = function () {
        $.fn.tree = old;
        return this;
    };

    // Tree Data API
    // =============
    $(window).on('load', function () {
        $(Selector.data).each(function () {
            Plugin.call($(this));
        });
    });

}(jQuery);


/* Layout()
 * ========
 * Implements ME App V2.0 layout.
 * Fixes the layout height in case min-height fails.
 *
 * @usage activated automatically upon window load.
 *        Configure any options by passing data-option="value"
 *        to the body tag.
 */
+function ($) {
    'use strict';

    var DataKey = 'lte.layout';

    var Default = {
        slimscroll: true,
        resetHeight: true
    };

    var Selector = {
        wrapper: '.wrapper',
        contentWrapper: '.content-wrapper',
        layoutBoxed: '.layout-boxed',
        mainFooter: '.main-footer',
        mainHeader: '.main-header',
        mainSidebar: '.main-sidebar',
        slimScrollDiv: 'slimScrollDiv',
        sidebar: '.sidebar',
        controlSidebar: '.control-sidebar',
        fixed: '.fixed',
        sidebarMenu: '.sidebar-menu',
        logo: '.main-header .logo'
    };

    var ClassName = {
        fixed: 'fixed',
        holdTransition: 'hold-transition'
    };

    var Layout = function (options) {
        this.options = options;
        this.bindedResize = false;
        this.activate();
    };

    Layout.prototype.activate = function () {
        this.fix();
        this.fixSidebar();

        $('body').removeClass(ClassName.holdTransition);

        if (this.options.resetHeight) {
            $('body, html, ' + Selector.wrapper).css({
                'height': 'auto',
                'min-height': '100%'
            });
        }

        if (!this.bindedResize) {
            $(window).resize(function () {
                this.fix();
                this.fixSidebar();

                $(Selector.logo + ', ' + Selector.sidebar).one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function () {
                    this.fix();
                    this.fixSidebar();
                }.bind(this));
            }.bind(this));

            this.bindedResize = true;
        }

        $(Selector.sidebarMenu).on('expanded.tree', function () {
            this.fix();
            this.fixSidebar();
        }.bind(this));

        $(Selector.sidebarMenu).on('collapsed.tree', function () {
            this.fix();
            this.fixSidebar();
        }.bind(this));
    };

    Layout.prototype.fix = function () {
        // Remove overflow from .wrapper if layout-boxed exists
        $(Selector.layoutBoxed + ' > ' + Selector.wrapper).css('overflow', 'hidden');

        // Get window height and the wrapper height
        var footerHeight = $(Selector.mainFooter).outerHeight() || 0;
        var headerHeight = $(Selector.mainHeader).outerHeight() || 0;
        var neg = headerHeight + footerHeight;
        var windowHeight = $(window).height();
        var sidebarHeight = $(Selector.sidebar).outerHeight() || 0;

        // Set the min-height of the content and sidebar based on
        // the height of the document.
        if ($('body').hasClass(ClassName.fixed)) {
            $(Selector.contentWrapper).css('min-height', windowHeight - footerHeight);
        } else {
            var postSetHeight;

            if (windowHeight >= sidebarHeight + headerHeight) {
                $(Selector.contentWrapper).css('min-height', windowHeight - neg);
                postSetHeight = windowHeight - neg;
            } else {
                $(Selector.contentWrapper).css('min-height', sidebarHeight);
                postSetHeight = sidebarHeight;
            }

            // Fix for the control sidebar height
            var $controlSidebar = $(Selector.controlSidebar);
            if (typeof $controlSidebar !== 'undefined') {
                if ($controlSidebar.height() > postSetHeight)
                    $(Selector.contentWrapper).css('min-height', $controlSidebar.height());
            }
        }
    };

    Layout.prototype.fixSidebar = function () {
        // Make sure the body tag has the .fixed class
        if (!$('body').hasClass(ClassName.fixed)) {
            if (typeof $.fn.slimScroll !== 'undefined') {
                $(Selector.sidebar).slimScroll({ destroy: true }).height('auto');
            }
            return;
        }

        // Enable slimscroll for fixed layout
        if (this.options.slimscroll) {
            if (typeof $.fn.slimScroll !== 'undefined') {
                // Destroy if it exists
                // $(Selector.sidebar).slimScroll({ destroy: true }).height('auto')

                // Add slimscroll
                if ($(Selector.mainSidebar).find(Selector.slimScrollDiv).length === 0) {
                    $(Selector.sidebar).slimScroll({
                        height: ($(window).height() - $(Selector.mainHeader).height()) + 'px'
                    });
                }
            }
        }
    };

    // Plugin Definition
    // =================
    function Plugin(option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data(DataKey);

            if (!data) {
                var options = $.extend({}, Default, $this.data(), typeof option === 'object' && option);
                $this.data(DataKey, (data = new Layout(options)));
            }

            if (typeof option === 'string') {
                if (typeof data[option] === 'undefined') {
                    throw new Error('No method named ' + option);
                }
                data[option]();
            }
        });
    }

    var old = $.fn.layout;

    $.fn.layout = Plugin;
    $.fn.layout.Constuctor = Layout;

    // No conflict mode
    // ================
    $.fn.layout.noConflict = function () {
        $.fn.layout = old;
        return this;
    };

    // Layout DATA-API
    // ===============
    $(window).on('load', function () {
        Plugin.call($('body'));
    });
}(jQuery);


//Public Function JSDecrypt(ByVal DLine As String) As String
//    If DLine = "" Then Return DLine

//    If Asc(Mid(DLine, 1, 1)) < 120 Then
//Return DLine
//End If
//Dim dd, ff, gg As String
//Dim l As Integer
//Dim i As Long
//Dim casc As Long
//dd = ""
//l = Len(DLine)
//Dim adn = -2
//For i = l - 1 To 0 Step (-1)
//If adn = 2 Then adn = -2 Else adn = 2
//gg = Mid(DLine, l - i, 1)
//casc = Asc(gg) - 120 + adn
//ff = Chr(casc)
//dd = dd & ff
//Next i
//Return dd
//End Function
//document.write("Unicode for character ਔ is: " + "ਔ".charCodeAt(0) + "<br />");
//document.write("Character 2580 is " + String.fromCharCode(2580) + "<br />");
//Unicode for character ਔ is: 2580
//Character 2580 is ਔ
function JSDecrypt(Dline) {
    Dline = new String(Dline);
    if (Dline.length = 0) { return Dline; }
    if (Dline.charCodeAt(0) < 120) { return Dline; }
    var dd, ff, gg, l, i, csac, adn;
    dd = "";
    l = Dline.length;
   
    for (i = 0; i <l; i++) {
       
        casc = Dline.charCodeAt((l-1)-i)-120;
        ff = String.fromCharCode(casc);
        dd = dd + ff;
    }
    dd = dd.replace(/ɤ/g, " ").replace(/"/g, '').replace(/ᾮᾢ/g, "\n").replace(/é/g, "\"").replace(/₪/g, "!");
    return dd;
}
/*
 document.onload = function () { try { document.body.innerHTML = JSDecrypt(document.body.innerHTML); } catch (ex) { document.body.innerHTML = "<h1>This Document is only visible and accesible within TML Network or TML-VPN</h1>"; } }

*/

//Hour Picker Function
// Make sure jQuery has been loaded
if (typeof jQuery === 'undefined') {
    throw new Error('ME App V2.0 requires jQuery')
}

function ArrayHasApp(list, obj) { for (var i = 0; i < list.length; i++) { if (list[i].AppID == obj.AppID) { return true; } } return false; }
function ArrayHasPG(list, obj) { for (var i = 0; i < list.length; i++) { if (list[i].PGID == obj.PGID) { return true; } } return false; }
function ArrayHasPage(list, obj) { for (var i = 0; i < list.length; i++) { if (list[i].PageID == obj.PageID) { return true; } } return false; }

function cascadeDD(QryName, dd1, dd2, dd3, Editor,HFL,app,pg,page) {
   

    Editor.summernote({
        height: 360,
        toolbar: [       
        ['font', ['bold','italic', 'underline', 'clear', 'strikethrough', 'superscript', 'subscript','style']],
        ['fontname', ['fontname', 'fontsize','color']],
       
        ['para', ['ul', 'ol', 'paragraph']],       
        ['insert', ['link', 'picture', 'table', 'hr']],
        ['view', ['fullscreen', 'codeview']],
        ['height', ['0.8', '0.9', 'height']]
        ],
        codemirror: { theme: 'rubyblue' },
        tableClassName: 'table-bordered table-sm table-striped',
        styleTags: ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6']

    });
    $(".note-editor").css("border", "1px solid rgba(0, 0, 0, 0.5)")
    let arrData = [];
    // Fill the first dropdown with data.
    $.getJSON(LinkURL+'ClientServerScriptData/GetJson.aspx?JSONName=' + QryName, function (data) {
        var Apps = [];
        var param = "birthDate"
        $.each(data, function () {
            //"PGroupID":4,"PageGroupName":"Administration","PageID":1,"PageName":"RIYA Applications:Manage Application on RIYA"
            var y = { AppID: this.AppID, AppName: this.Application, PGID: this.PGroupID, GroupName: this.PageGroupName, PageID: this.PageID, PageName: this.PageName, URL: this.URL };
            arrData.push(y);
            var x = { AppID: this.AppID, AppName: this.Application };
            if (!ArrayHasApp(Apps, x)) { Apps.push(x); }
        });
        dd1.empty().append('<option value="-1" selected="selected">Tiny Help Topic</option>');;
        $.each(Apps, function (index, value) { dd1.append('<option value="' + value.AppID + '">' + value.AppName + '</option>'); });
        dd1Change();
        dd2Change();
        dd3Change();
        if (app != undefined) { dd1.val(app).change(); }
        if (pg != undefined) { dd2.val(pg).change(); }
        if (page != undefined) { dd3.val(page).change(); }

    });

    dd1.change(dd1Change);
    dd2.change(dd2Change);
    dd3.change(dd3Change);
    function dd2Change() {
        let AppID = parseInt(dd1.val());
        let PGID = parseInt(dd2.val());
        let Pages = [];
        $.each(arrData, function () {
            if (this.AppID == AppID && this.PGID == PGID) {
                var x = { PageID: this.PageID, PageName: this.PageName };
                if (!ArrayHasPage(Pages, x)) { Pages.push(x) }
            }
        });
        dd3.empty().append('<option value="0" selected="selected">Select Page</option>');;

        $.each(Pages, function (index, value) {
            dd3.append('<option value="' + value.PageID + '">' + value.PageName + '</option>');
        });
        UpdateChangedValues();
    }
    function dd3Change() {
        let PageIDx = parseInt(dd3.val());
        var dx = arrData.filter(function (x) {
            if (x.PageID == PageIDx) { return x }
        });
        if (dx.length > 0) { $("#pageURLxy").attr("href", dx[0].URL).text(dx[0].URL); } else { $("#pageURLxy").removeAttr("href").text("No Page Selected"); }
        UpdateChangedValues();
    }
    function dd1Change() {
        let AppID = parseInt(dd1.val());
        let PGList = [];

        $.each(arrData, function () {
            if (this.AppID == AppID) {
                var x = { PGID: this.PGID, GroupName: this.GroupName };
                if (!ArrayHasPG(PGList, x)) { PGList.push(x) }
            }
        });

        dd2.empty();
        dd2.append('<option value="-1" selected="selected">Application Help</option>')
        $.each(PGList, function (index, value) {
            // Now, fill the second dropdown list with bird names.
            dd2.append('<option value="' + value.PGID + '">' + value.GroupName + '</option>');
        });
        UpdateChangedValues();
    }
    function UpdateChangedValues() {
        HFL.val(dd1.val()+':'+dd2.val()+":"+dd3.val())
    }
}

$("#HelpContent").removeClass("invisible").hide();
$(".TinyHelper").each(function (index, value) {
    $(this).on("click", function (x) {
        var x = $(this).data("helpid");
        const rect = value.getBoundingClientRect();

        RIYA_V03.RIYAService.getTinyHelp(x, showHelp, NoHelp);
        function showHelp(result) {
            $("#HelpContent").children().last().html(result); positionFix();
        }
        function NoHelp() {
            $("#HelpContent").children().last().html('<h3>Erro Showing Help</h3>').show(); positionFix();
        }
        function positionFix() {
            var y = value.getBoundingClientRect();
            var left, right;
            left = Math.max(0, parseInt(y.left) - 200);
            right = parseInt(y.top);// Math.max(0, (y.top - parseInt($("#HelpContent").height())));
            $("#HelpContent").css("left", left).css("top", right).show();
        }
    });
});


window.password_prompt = function (label_message, button_message, arg3, arg4, arg5) {

    if (typeof label_message !== "string") var label_message = "Password:";
    if (typeof button_message !== "string") var button_message = "Submit";
    if (typeof arg3 === "function") {
        var callback = arg3;
    }
    else if (typeof arg3 === "number" && typeof arg4 === "number" && typeof arg5 === "function") {
        var width = arg3;
        var height = arg4;
        var callback = arg5;
    }
    if (typeof width !== "number") var width = 400;
    if (typeof height !== "number") var height = 350;
    if (typeof callback !== "function") var callback = function (obj) { };

    var submit = function () {
        if (input.value.length > 3 && input2.value.length > 3) {
            lblMsg.style.display = "none";
            callback({ PWD: input.value, UID: input2.value, isValid: true });
            document.body.removeChild(div);
            window.removeEventListener("resize", resize, false);
        } else { lblMsg.innerText = "Enter UserID and Password;"; lblMsg.style.display = "block"; }
    };
    var resize = function () {
        div.style.left = ((window.innerWidth / 2) - (width / 2)) + "px";
        div.style.top = ((window.innerHeight / 2) - (height / 2)) + "px";
    };
    var cancel = function () {
        callback({ PWD: null, UID: null, isValid: false });

        document.body.removeChild(div);
        window.removeEventListener("resize", resize, false);
    }

    var div = document.createElement("div");
    div.id = "password_prompt";
    div.className = "bg-gray-light";
    div.style.color = "black";
    div.style.border = "1px solid black";
    div.style.borderRadius = "10px";
    div.style.width = width + "px";
    div.style.height = height + "px";
    div.style.padding = "16px";
    div.style.position = "fixed";
    div.style.left = ((window.innerWidth / 2) - (width / 2)) + "px";
    div.style.top = ((window.innerHeight / 2) - (height / 2)) + "px";

    var label = document.createElement("h3");
    label.id = "password_prompt_label";
    label.innerHTML = label_message;
    label.for = "password_prompt_input";
    div.appendChild(label);

    div.appendChild(document.createElement("br"));
    var lb1 = document.createElement("B"); lb1.innerText = "Enter UserName/PNo/Email/MobileNo:";

    div.appendChild(lb1)
    var input2 = document.createElement("input");
    input2.className = "form-control"
    input2.id = "uid_prompt_input";
    div.appendChild(input2);

    div.appendChild(document.createElement("br"));
    var lb2 = document.createElement("B"); lb2.innerText = "Enter Password:";

    div.appendChild(lb2)
    var input = document.createElement("input");
    input.className = "form-control"
    input.id = "password_prompt_input";
    input.type = "password";
    input.addEventListener("keyup", function (e) {
        if (event.keyCode == 13) submit();
    }, false);
    div.appendChild(input);

    div.appendChild(document.createElement("br"));
    var msg = document.createElement("p")
    msg.className = "text-danger";
    msg.style.display = "none;"
    msg.id = "lblMsg";
    div.appendChild(msg);


    var button = document.createElement("button");
    button.innerHTML = button_message;
    button.className = "btn btn-info";
    button.addEventListener("click", submit, false);
    div.appendChild(button);

    document.body.appendChild(div);
    window.addEventListener("resize", resize, false);
};


function QH(x) {
    if (x == 1) {
        $("#PagebodyDiv").hide();
        //$("#PagebodyDiv").html('<h1>This Part of Applicaion is Under Development.</h1>');
        setTimeout(function () { alert('We are currently working on this Page/Application, please avoid it for now. you can continue with other Pages'); }, 500);
        
    } else {
        $("#PagebodyDiv").show();
    }
}



function superCrypt(x) {
    var encodedHtml = btoa(x);

    return encodedHtml;
}

function superDeCrypt(x) {
    var encodedHtml = atob(x);

    return encodedHtml;
}

var Request = {
    RawURL: window.location.href,
    QueryString: function (name) {
        var url = window.location.href;
    
        name = name.replace(/[\[\]]/g, '\\$&');
    
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)','i'),results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    },
    DomainName: function (xx) {
        try{
           return window.location.href.split("//")[1].split("/")[0]
        }catch(ex){return 'Error Getting Domain Name:'}
       
    },
    SubDomain: function () {
        try {
            var xx = window.location.href.split("//")[1].split("/")[0].split(".");
            var d="";
            for (var i = 0; i < xx.length - 1; i++) {
                d += xx[i] + "."
            }
            return d;
        } catch (ex) { 'Error Getting Sub Name:' }

    },
    AppServer: function () {
        try {
            var xx = window.location.href.split("//")[1].split("/")[0].split(".");

            return xx[0];
        } catch (ex) { 'Error Getting Sub Name:' }

    }
};

$(".summable").each(function (index, value) {
    try {
        var x = $(value);
        if (x.data("sumcols")) {
            var coll = x.data("sumcols").split(",");
            var cols = coll.map(Number); // Convert strings to numbers
            var vals = Array(cols.length).fill(0); // Initialize array with zeros

            var rows = $("#" + value.id + " > tbody > tr");
            for (var i = 1; i < rows.length; i++) {
                for (var j = 0; j < cols.length; j++) {
                    var val = parseFloat($(rows[i]).children().eq(cols[j]).text());
                    vals[j] += isNaN(val) ? 0 : val; // Check for NaN before adding
                }
            }

            var newRow = $(rows[0].outerHTML);
            $(newRow.children().eq(parseInt(x.data("totalcolindex")))).text(x.data("totaltext"));
            for (var j = 0; j < cols.length; j++) {
                $(newRow.children().eq(cols[j])).text(vals[j]);
                $(newRow.children().eq(cols[j])).css("text-align", "right");
            }
            $('#' + value.id + ' > tbody').append(newRow);
        }
    } catch (error) {
        console.log("Error Summing Table: " + value.id);
        console.log("Table must have class 'summable', and the following Data Attributes:");
        console.log("'sumcols': list of column indexes separated by commas, e.g. data-sumcols='1,2,3,4,5,6,7'");
        console.log("'totalcolindex': Index of the column where you want to put the Total Header Text, e.g. data-totalcolindex='0'");
        console.log("'totaltext': Text for the Total Header, e.g. data-totaltext='Grand Total'");
        console.log(error);
    }
});


function setStylesxxx() {
    var coldsg =colorToHex( $("#riyaMainTitle").css("color"));
    var bg = $("#ApplistUL").css("background");
    var bgc = $("#ApplistUL").css("background-color:");


    $('#PageZoomSlider').slider();
    $('#PageZoomSlider').on('slide', function () {
        var x = parseFloat($(this).val())
        $("#PagebodyDiv").css("zoom", x / 100.0);
    });
    $(".rbg> .slider >.slider-track").css("background-color", coldsg)

    var xdsgsasfknee = "-webkit-box-shadow: inset 0 0 5px " + coldsg + " !important;"
    if (bg) {
        xdsgsasfknee = xdsgsasfknee + " background:" + bg + " !important; "

    }
    if (bgc) {
        xdsgsasfknee = xdsgsasfknee + "background-color:" + bgc + " !important;"

    }
    $("#rbgStyle").html("::-webkit-scrollbar-thumb {" + xdsgsasfknee + "}");

}

function colorToHex(colorString) {
    // Remove any whitespace from the input string
    colorString = colorString.trim();

    // Check if the input is a hexadecimal color
    if (/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(colorString)) {
        // If the input is a hexadecimal color, return it as is
        return colorString.toLowerCase();
    }

    // Check if the input is an RGB or RGBA color
    const rgbaRegex = /^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/;
    const match = colorString.match(rgbaRegex);

    if (match) {
        // If the input is an RGB or RGBA color, convert it to hexadecimal
        const [, r, g, b, a] = match;
        const hexR = parseInt(r).toString(16).padStart(2, '0');
        const hexG = parseInt(g).toString(16).padStart(2, '0');
        const hexB = parseInt(b).toString(16).padStart(2, '0');
        return `#${hexR}${hexG}${hexB}`;
    }

    // If the input is not a valid color, return the original input
    return colorString;
}

var ShownDateTimePicker = false;

$("#CntPageBody_txtAddEmpNo").on('click', function () {
    setTimeout(ToggleDateRangePicker, 1000);
    
});

function ToggleDateRangePicker() {
    if (!ShownDateTimePicker) {
        $("div.daterangepicker.dropdown-menu").hide();
        ShownDateTimePicker = false;
    } else {
        $("div.daterangepicker.dropdown-menu").show();
        ShownDateTimePicker = true;
    }
}


function assinLIEvent() {
    $(".libutton").on('click', function () {
        $(this).data("selected", $(this).data("selected") === "0" ? "1" : "0");
        this.dataset.selected = this.dataset.selected === "0" ? "1" : "0";
    });
}

//Correct Logo Color
$(".logoX  path").attr("fill", $("#riyaMainTitle").css("color"));
$(".logoX  polygon").attr("fill", $("#riyaMainTitle").css("color"));


$("#Layer_2  polygon").each(function (index, value) {
    $(value).attr("fill", $("#riyaMainTitle").css("color"));
});
$("#Layer_1  polygon").each(function (index, value) {
    $(value).attr("fill", $("#riyaMainTitle").css("color"));
});
$("#Layer_2  path").each(function (index, value) {
    $(value).attr("fill", $("#riyaMainTitle").css("color"));
});
$("#Layer_1  path").each(function (index, value) {
    $(value).attr("fill", $("#riyaMainTitle").css("color"));
});


